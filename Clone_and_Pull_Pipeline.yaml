# PIPELINE DEFINITION
# Name: clone-repo-and-dvc-pull
# Inputs:
#    access_key: str
#    branch_name: str
#    cloned_dir: str
#    github_token: str
#    github_username: str
#    minio_url: str
#    remote_name: str
#    remote_url: str
#    repo_url: str
#    secret_key: str
# Outputs:
#    Output: str
components:
  comp-clone-repo-and-dvc-pull:
    executorLabel: exec-clone-repo-and-dvc-pull
    inputDefinitions:
      parameters:
        access_key:
          parameterType: STRING
        branch_name:
          parameterType: STRING
        cloned_dir:
          parameterType: STRING
        github_token:
          parameterType: STRING
        github_username:
          parameterType: STRING
        minio_url:
          parameterType: STRING
        remote_name:
          parameterType: STRING
        remote_url:
          parameterType: STRING
        repo_url:
          parameterType: STRING
        secret_key:
          parameterType: STRING
    outputDefinitions:
      parameters:
        Output:
          parameterType: STRING
deploymentSpec:
  executors:
    exec-clone-repo-and-dvc-pull:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - clone_repo_and_dvc_pull
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'gitpython'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef clone_repo_and_dvc_pull(\n    repo_url: str,\n    cloned_dir:\
          \ str,\n    branch_name: str,\n    github_username: str,\n    github_token:\
          \ str,\n    remote_name: str,\n    remote_url: str,\n    minio_url: str,\n\
          \    access_key: str,\n    secret_key: str\n) -> str:\n    from git import\
          \ Repo\n    from subprocess import run, CalledProcessError\n\n    def clone_repository_with_token(repo_url,\
          \ cloned_dir, branch_name, github_username, github_token):\n        \"\"\
          \"Clone a Git repository using a GitHub token in the URL and specifying\
          \ the branch.\"\"\"\n        try:\n            # Construct the URL with\
          \ the GitHub username and token\n            url_with_token = f\"https://{github_username}:{github_token}@{repo_url.split('//')[1]}\"\
          \n\n            # Clone the repository from the specified branch\n     \
          \       repo = Repo.clone_from(url_with_token, cloned_dir, branch=branch_name)\n\
          \            return \"Repository cloned successfully\"\n        except Exception\
          \ as e:\n            return f\"Error occurred during repository cloning:\
          \ {e}\"\n\n    def configure_dvc_remote(cloned_dir, remote_name, remote_url,\
          \ minio_url, access_key, secret_key):\n        \"\"\"Configure the Minio\
          \ bucket as the DVC remote repository using the `dvc remote` commands.\"\
          \"\"\n        try:\n            # Add the remote\n            run(\n   \
          \             ['dvc', 'remote', 'add', remote_name, remote_url],\n     \
          \           cwd=cloned_dir,\n                capture_output=True,\n    \
          \            text=True,\n                check=True\n            )\n\n \
          \           # Configure the endpoint URL\n            run(\n           \
          \     ['dvc', 'remote', 'modify', remote_name, 'endpointurl', f'http://{minio_url}'],\n\
          \                cwd=cloned_dir,\n                capture_output=True,\n\
          \                text=True,\n                check=True\n            )\n\
          \n            # Configure access key ID\n            run(\n            \
          \    ['dvc', 'remote', 'modify', remote_name, 'access_key_id', access_key],\n\
          \                cwd=cloned_dir,\n                capture_output=True,\n\
          \                text=True,\n                check=True\n            )\n\
          \n            # Configure secret access key\n            run(\n        \
          \        ['dvc', 'remote', 'modify', remote_name, 'secret_access_key', secret_key],\n\
          \                cwd=cloned_dir,\n                capture_output=True,\n\
          \                text=True,\n                check=True\n            )\n\
          \n            return f'Successfully configured Minio bucket as DVC remote\
          \ repository: {remote_name}'\n        except CalledProcessError as e:\n\
          \            # Log and raise any errors\n            return f'Failed to\
          \ configure DVC remote: {e.stderr}'\n\n    def perform_dvc_pull(cloned_dir):\n\
          \        \"\"\"Perform a DVC pull to synchronize local data with the remote\
          \ repository.\"\"\"\n        try:\n            # Run the `dvc pull` command\n\
          \            result = run(['dvc', 'pull'], cwd=cloned_dir, capture_output=True,\
          \ text=True)\n\n            # Check if the command executed successfully\n\
          \            if result.returncode != 0:\n                # Log and raise\
          \ an error if the command failed\n                error_message = f\"dvc\
          \ pull failed with error: {result.stderr}\"\n                raise Exception(error_message)\n\
          \n            # Log successful operation\n            return \"Successfully\
          \ pulled data from remote DVC repository\"\n\n        except Exception as\
          \ e:\n            # Log and handle the error\n            return f\"Error\
          \ occurred during dvc pull: {e}\"\n\n    # Call the functions\n    configure_result\
          \ = configure_dvc_remote(cloned_dir, remote_name, remote_url, minio_url,\
          \ access_key, secret_key)\n    clone_result = clone_repository_with_token(repo_url,\
          \ cloned_dir, branch_name, github_username, github_token)\n    dvc_pull_result\
          \ = perform_dvc_pull(cloned_dir)\n\n    return f\"{configure_result}, {clone_result},\
          \ {dvc_pull_result}\"\n\n"
        image: python:3.7
pipelineInfo:
  name: clone-repo-and-dvc-pull
root:
  dag:
    outputs:
      parameters:
        Output:
          valueFromParameter:
            outputParameterKey: Output
            producerSubtask: clone-repo-and-dvc-pull
    tasks:
      clone-repo-and-dvc-pull:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-clone-repo-and-dvc-pull
        inputs:
          parameters:
            access_key:
              componentInputParameter: access_key
            branch_name:
              componentInputParameter: branch_name
            cloned_dir:
              componentInputParameter: cloned_dir
            github_token:
              componentInputParameter: github_token
            github_username:
              componentInputParameter: github_username
            minio_url:
              componentInputParameter: minio_url
            remote_name:
              componentInputParameter: remote_name
            remote_url:
              componentInputParameter: remote_url
            repo_url:
              componentInputParameter: repo_url
            secret_key:
              componentInputParameter: secret_key
        taskInfo:
          name: clone-repo-and-dvc-pull
  inputDefinitions:
    parameters:
      access_key:
        parameterType: STRING
      branch_name:
        parameterType: STRING
      cloned_dir:
        parameterType: STRING
      github_token:
        parameterType: STRING
      github_username:
        parameterType: STRING
      minio_url:
        parameterType: STRING
      remote_name:
        parameterType: STRING
      remote_url:
        parameterType: STRING
      repo_url:
        parameterType: STRING
      secret_key:
        parameterType: STRING
  outputDefinitions:
    parameters:
      Output:
        parameterType: STRING
schemaVersion: 2.1.0
sdkVersion: kfp-2.7.0
